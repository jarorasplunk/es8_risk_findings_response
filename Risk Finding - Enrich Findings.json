{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_2_to_port_4",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_16_to_port_17",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_5_to_port_18",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "id": "port_20_to_port_1",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_17_to_port_12",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_12_to_port_22",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_12_to_port_23",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_23_to_port_24",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_22_to_port_25",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_24_to_port_20",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_25_to_port_20",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_27_to_port_28",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "28",
                    "targetPort": "28_in"
                },
                {
                    "id": "port_28_to_port_20",
                    "sourceNode": "28",
                    "sourcePort": "28_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_0_to_port_29",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "29",
                    "targetPort": "29_in"
                },
                {
                    "id": "port_29_to_port_16",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_30_to_port_27",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_30_to_port_20",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_34_to_port_2",
                    "sourceNode": "34",
                    "sourcePort": "34_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_34_to_port_35",
                    "sourceNode": "34",
                    "sourcePort": "34_out",
                    "targetNode": "35",
                    "targetPort": "35_in"
                },
                {
                    "id": "port_17_to_port_19",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_4_to_port_5",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_35_to_port_36",
                    "sourceNode": "35",
                    "sourcePort": "35_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "id": "port_36_to_port_37",
                    "sourceNode": "36",
                    "sourcePort": "36_out",
                    "targetNode": "37",
                    "targetPort": "37_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_38_to_port_20",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_39_to_port_40",
                    "sourceNode": "39",
                    "sourcePort": "39_out",
                    "targetNode": "40",
                    "targetPort": "40_in"
                },
                {
                    "id": "port_40_to_port_20",
                    "sourceNode": "40",
                    "sourcePort": "40_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_19_to_port_34",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "34",
                    "targetPort": "34_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_38_to_port_39",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "39",
                    "targetPort": "39_in"
                },
                {
                    "id": "port_37_to_port_42",
                    "sourceNode": "37",
                    "sourcePort": "37_out",
                    "targetNode": "42",
                    "targetPort": "42_in"
                },
                {
                    "id": "port_42_to_port_38",
                    "sourceNode": "42",
                    "sourcePort": "42_out",
                    "targetNode": "38",
                    "targetPort": "38_in"
                },
                {
                    "id": "port_18_to_port_43",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "43",
                    "targetPort": "43_in"
                },
                {
                    "id": "port_43_to_port_30",
                    "sourceNode": "43",
                    "sourcePort": "43_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                }
            ],
            "hash": "4e615108d1f5eb555812de7f0bed2f844b367016",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {
                        "input_spec": [
                            {
                                "name": "Name is required"
                            }
                        ]
                    },
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 630,
                    "y": -4.973799150320701e-14
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 700,
                    "y": 2756
                },
                "12": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_object_type",
                                        "value": "user"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "user",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_object_type",
                                        "value": "system"
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "system",
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "decision_3",
                        "id": "12",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "decision",
                    "warnings": {},
                    "x": 250,
                    "y": 1584
                },
                "16": {
                    "data": {
                        "action": "get phase id",
                        "actionType": "get",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_phase_id_1",
                        "id": "16",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_name": "Preprocess",
                            "response_template_name": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.name"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_name"
                            },
                            {
                                "data_type": "string",
                                "field": "response_template_name"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 610,
                    "y": 311.9999999999999
                },
                "17": {
                    "data": {
                        "action": "get task id",
                        "actionType": "get",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_task_id_1",
                        "id": "17",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_name": "Preprocess",
                            "response_template_name": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.name",
                            "task_name": "Enrich findings"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "field": "task_name"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_name"
                            },
                            {
                                "data_type": "string",
                                "field": "response_template_name"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 610,
                    "y": 461.9999999999999
                },
                "18": {
                    "data": {
                        "action": "add task note",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "add_task_note_1",
                        "id": "18",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "content": {
                                "functionId": 1,
                                "parameters": [
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_object_type",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_score",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_min_time",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_max_time",
                                    "mitre_format_findings:custom_function:output",
                                    "asset_get_attributes_1:custom_function_result.data.configuration.device"
                                ],
                                "template": "### Splunk Enterprise Security has detected that {0} '**{1}**' generated {2} points of risk.\n\n### Full statistics and timeline on this user's risk behavior can be found [here](https://{6}/app/SplunkEnterpriseSecuritySuite/risk_analysis?earliest={3}&latest={4}&form.risk_object_type_raw={0}&form.risk_object_raw={1}) \n\n\n\n# MITRE ATT&CK\u00ae\nSplunk SOAR has aggregated and aligned the following risk rules to ATT&CK Tactics and Techniques.\n\n{5}"
                            },
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_id": "get_phase_id_1:action_result.data.*.phase_id",
                            "response_plan_id": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.id",
                            "task_id": "get_task_id_1:action_result.data.*.task_id",
                            "title": {
                                "functionId": 1,
                                "parameters": [
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object"
                                ],
                                "template": "SOAR Analysis for: {0}\n"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "title"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "content"
                            },
                            {
                                "data_type": "string",
                                "field": "task_id"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_id"
                            },
                            {
                                "data_type": "string",
                                "field": "response_plan_id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 1130,
                    "y": 1434
                },
                "19": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "asset_get_attributes",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "asset_get_attributes_1",
                        "id": "19",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "asset_get_attributes": {
                                "description": "Allows the retrieval of an attribute from an asset configuration for access in a playbook. This can be valuable in instances such as a dynamic note that references the Asset hostname. Must provide asset name or id.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Asset numeric ID or asset name.",
                                        "inputType": "item",
                                        "label": "asset",
                                        "name": "asset",
                                        "placeholder": "splunk_es",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "asset_get_attributes",
                                "name": "asset_get_attributes"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "asset_get_attributes": {
                                "asset": "splunk"
                            }
                        }
                    },
                    "errors": {},
                    "id": "19",
                    "type": "utility",
                    "warnings": {},
                    "x": 950,
                    "y": 612
                },
                "2": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "run_query_1",
                        "id": "2",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "command": "| from ",
                            "query": {
                                "functionId": 1,
                                "parameters": [
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_min_time",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_max_time",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_object_type"
                                ],
                                "template": "datamodel Risk.All_Risk \n| search [ | tstats `summariesonly` `common_fbd_fields`, values(All_Risk.threat_object) as threat_object from datamodel=Risk.All_Risk where earliest={0} latest={1} by All_Risk.normalized_risk_object, All_Risk.risk_object_type, index\n| `get_mitre_annotations`\n| rename All_Risk.normalized_risk_object as normalized_risk_object, All_Risk.risk_object_type as risk_object_type\n| `generate_findings_summary`\n| stats list(*) as * limit=1000000, sum(int_risk_score_sum) as risk_score by `fbd_grouping(normalized_risk_object)`\n| `dedup_and_compute_common_fbd_fields`, threat_object=mvdedup(threat_object), risk_object_type=mvdedup(risk_object_type), num_mitre_techniques=mvcount('annotations.mitre_attack'), annotations.mitre_attack=mvdedup('annotations.mitre_attack'), annotations.mitre_attack.mitre_tactic=mvdedup('annotations.mitre_attack.mitre_tactic'), mitre_tactic_id_count=mvcount('annotations.mitre_attack.mitre_tactic'), mitre_technique_id_count=mvcount('annotations.mitre_attack')\n| fillnull value=0 num_mitre_techniques, mitre_tactic_id_count, mitre_technique_id_count, total_event_count, risk_score\n| fields - int_risk_score_sum, int_findings_count, individual_threat_object_count, contributing_event_ids\n| `drop_dm_object_name(\"All_Risk\")`\n| where normalized_risk_object=\"{2}\" AND risk_object_type=\"{3}\"\n| where num_mitre_techniques>3 OR risk_score>100 OR total_event_count>5\n| eval all_finding_ids=mvdedup(finding_ids)\n| fields all_finding_ids\n| mvexpand all_finding_ids\n| rename all_finding_ids AS source_event_id ]\n| rename annotations.mitre_attack.mitre_tactic as mitre_tactic, annotations.mitre_attack.mitre_technique as mitre_technique, annotations.mitre_attack.mitre_technique_id as mitre_technique_id\n| fields mitre_tactic, mitre_technique, mitre_technique_id, risk_message, threat_object, threat_object_type, threat_match_value, threat_match_field"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            },
                            {
                                "data_type": "string",
                                "default": "search",
                                "field": "command"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "warnings": {},
                    "x": 1130,
                    "y": 942
                },
                "20": {
                    "data": {
                        "action": "update task in current phase",
                        "actionType": "post",
                        "advanced": {
                            "join": [],
                            "notRequiredJoins": [
                                "add_task_note_3",
                                "add_task_note_2",
                                "add_task_note_4"
                            ]
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "update_task_in_current_phase_1",
                        "id": "20",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "name": "Enrich findings",
                            "status": "Ended",
                            "task_id": "get_task_id_1:action_result.data.*.task_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "field": "task_id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 680,
                    "y": 2596
                },
                "22": {
                    "data": {
                        "advanced": {
                            "customName": "user enrichment note",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "user_enrichment_note",
                        "id": "22",
                        "parameters": [
                            "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object"
                        ],
                        "template": "Review the user: {0} details:\n[Assets and Identities database](https://es8-shw-46d5351519c4f2.stg.splunkcloud.com/en-GB/app/SplunkEnterpriseSecuritySuite/identity_center?form.username={0}&form.priority=*&form.bunit=*&form.category=*&form.watchlist=*)\n\n\nGather intelligence about the user: {0} in ARI:\n\n[Asset and Risk Intelligence](https://es8-shw-46d5351519c4f2.stg.splunkcloud.com/en-GB/app/SplunkAssetRiskIntelligence/ari_user_search?form.time.earliest=-30d%40d&form.time.latest=now&form.profile=ip&form.series={0})\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "format",
                    "warnings": {},
                    "x": 0,
                    "y": 1764
                },
                "23": {
                    "data": {
                        "advanced": {
                            "customName": "asset enrichment note",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "asset_enrichment_note",
                        "id": "23",
                        "parameters": [
                            "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object"
                        ],
                        "template": "Review the asset: {0} details:\n[Assets and Identities database](https://es8-shw-46d5351519c4f2.stg.splunkcloud.com/en-GB/app/SplunkEnterpriseSecuritySuite/asset_center?form.pci_domain=*&form.asset={0}&form.priority=*&form.bunit=*&form.category=*&form.owner=*)\n\n\nGather intelligence about the asset: {0} in ARI:\n[Asset and Risk Intelligence](https://es8-shw-46d5351519c4f2.stg.splunkcloud.com/en-GB/app/SplunkAssetRiskIntelligence/ari_network_search?form.time.earliest=-7d%40h&form.time.latest=now&form.profile=ip&form.series={0})",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "format",
                    "warnings": {},
                    "x": 340,
                    "y": 1764
                },
                "24": {
                    "data": {
                        "action": "add task note",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "add_task_note_2",
                        "id": "24",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "content": "asset_enrichment_note:formatted_data",
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_id": "get_phase_id_1:action_result.data.*.phase_id",
                            "response_plan_id": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.id",
                            "task_id": "get_task_id_1:action_result.data.*.task_id",
                            "title": "Asset information:"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "title"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "content"
                            },
                            {
                                "data_type": "string",
                                "field": "task_id"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_id"
                            },
                            {
                                "data_type": "string",
                                "field": "response_plan_id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 340,
                    "y": 1914
                },
                "25": {
                    "data": {
                        "action": "add task note",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "add_task_note_3",
                        "id": "25",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "content": "user_enrichment_note:formatted_data",
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_id": "get_phase_id_1:action_result.data.*.phase_id",
                            "response_plan_id": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.id",
                            "task_id": "get_task_id_1:action_result.data.*.task_id",
                            "title": "User information:"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "title"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "content"
                            },
                            {
                                "data_type": "string",
                                "field": "task_id"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_id"
                            },
                            {
                                "data_type": "string",
                                "field": "response_plan_id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 0,
                    "y": 1914
                },
                "27": {
                    "data": {
                        "advanced": {
                            "customName": "threat objects note",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": []
                        },
                        "functionId": 4,
                        "functionName": "threat_objects_note",
                        "id": "27",
                        "parameters": [
                            "finding_threat_objects:custom_function:threat_object_type",
                            "finding_threat_objects:custom_function:threat_object"
                        ],
                        "template": "Below threat objects have been identified as part of this investigation:\n\n| Threat Indicator Type | Indicator Value |\n| --- | --- |\n%%\n| {0} | {1} |\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "format",
                    "warnings": {},
                    "x": 940,
                    "y": 2300
                },
                "28": {
                    "data": {
                        "action": "add task note",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 4,
                        "functionName": "add_task_note_4",
                        "id": "28",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "content": "threat_objects_note:formatted_data",
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_id": "get_phase_id_1:action_result.data.*.phase_id",
                            "response_plan_id": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.id",
                            "task_id": "get_task_id_1:action_result.data.*.task_id",
                            "title": "Threat information:"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "title"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "content"
                            },
                            {
                                "data_type": "string",
                                "field": "task_id"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_id"
                            },
                            {
                                "data_type": "string",
                                "field": "response_plan_id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "28",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 940,
                    "y": 2460
                },
                "29": {
                    "data": {
                        "action": "refresh finding or investigation",
                        "actionType": "get",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "refresh_finding_or_investigation_1",
                        "id": "29",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "id": "finding:investigation_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 610,
                    "y": 149.99999999999994
                },
                "30": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "is not empty",
                                        "param": "finding_threat_objects:custom_function:threat_object"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "threat objects",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "no threat objects",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "30",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "30",
                    "type": "decision",
                    "warnings": {},
                    "x": 1200,
                    "y": 1780
                },
                "34": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.count_findings",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "findings",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "intermediate findings",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "decision_4",
                        "id": "34",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "34",
                    "type": "decision",
                    "warnings": {},
                    "x": 1030,
                    "y": 762
                },
                "35": {
                    "data": {
                        "action": "run query",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "run_query_2",
                        "id": "35",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "command": "| from ",
                            "query": {
                                "functionId": 2,
                                "parameters": [
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_min_time",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_max_time",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_object_type"
                                ],
                                "template": "datamodel Risk.All_Risk  \n| search _time>={0} AND _time<={1}\n| search normalized_risk_object=\"{2}\" AND risk_object_type=\"{3}\"\n    \n| rename annotations.mitre_attack.mitre_tactic as mitre_tactic, annotations.mitre_attack.mitre_technique as mitre_technique, annotations.mitre_attack.mitre_technique_id as mitre_technique_id \n| fields mitre_tactic, mitre_technique, mitre_technique_id, risk_message, threat_object, threat_object_type, threat_match_value, threat_match_field"
                            },
                            "search_mode": "smart"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "query"
                            },
                            {
                                "data_type": "string",
                                "default": "search",
                                "field": "command"
                            },
                            {
                                "data_type": "string",
                                "default": "smart",
                                "field": "search_mode"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "35",
                    "type": "action",
                    "warnings": {},
                    "x": 770,
                    "y": 1107
                },
                "36": {
                    "data": {
                        "advanced": {
                            "customName": "mitre format int findings",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "mitre_format_int_findings",
                        "id": "36",
                        "inputParameters": [
                            "run_query_2:action_result.data.*.mitre_tactic",
                            "run_query_2:action_result.data.*.mitre_technique",
                            "run_query_2:action_result.data.*.mitre_technique_id",
                            "run_query_2:action_result.data.*.risk_message"
                        ],
                        "outputVariables": [
                            "output"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "36",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    from collections import OrderedDict \n    from operator import getitem \n    \n    def mitre_sorter(item):\n        tactic_list = [\n            'reconnaissance', 'resource-development', 'initial-access', 'execution', \n            'persistence', 'privilege-escalation', 'defense-evasion', 'credential-access', \n            'discovery', 'lateral-movement', 'collection', 'command-and-control', \n            'exfiltration', 'impact'\n        ]\n        index_map = {v: i for i, v in enumerate(tactic_list)}\n        if ',' in item[0]:\n            first_item = item[0].split(', ')[1]\n            return index_map[first_item]\n        else:\n            return index_map[item[0]]\n\n    \n    def replace_all(text):\n        char_list = ['[', ']', '\"', \"'\"]\n        for char in char_list:\n            text = text.replace(char, '')\n        return text\n\n    mitre_dictionary = {}\n    for mitre_tactic, mitre_technique, mitre_technique_id, risk_message in zip(run_query_2_result_item_0, run_query_2_result_item_1, run_query_2_result_item_2, run_query_2_result_item_3):\n        \n        mitre_tactic = replace_all(json.dumps(mitre_tactic)) if mitre_tactic else None\n        mitre_technique = replace_all(json.dumps(mitre_technique)) if mitre_technique else None\n        mitre_technique_id = replace_all(json.dumps(mitre_technique_id)) if mitre_technique_id else None\n        \n        if mitre_tactic and mitre_tactic not in mitre_dictionary.keys():\n            mitre_dictionary[mitre_tactic] = {mitre_technique: {'id': mitre_technique_id, 'risk_message': [risk_message]}}\n        elif mitre_tactic and mitre_tactic in mitre_dictionary.keys():\n            if mitre_technique and mitre_technique not in mitre_dictionary[mitre_tactic].keys():\n                mitre_dictionary[mitre_tactic][mitre_technique] = {'id': mitre_technique_id, 'risk_message': [risk_message]}\n            elif mitre_technique and mitre_technique in mitre_dictionary[mitre_tactic].keys():\n                if risk_message not in mitre_dictionary[mitre_tactic][mitre_technique]['risk_message']:\n                    mitre_dictionary[mitre_tactic][mitre_technique]['risk_message'].append(risk_message)\n    \n    mitre_copy = mitre_dictionary.copy()\n    for k,v in mitre_copy.items():\n        sorted_techniques = OrderedDict(sorted(v.items(),\n                                               key = lambda x: getitem(x[1], 'id')\n                                              )\n                                       ) \n        for a,b in sorted_techniques.items():\n            sorted_techniques[a] = b['risk_message']\n        mitre_copy[k] = sorted_techniques\n\n    final_dictionary = sorted(mitre_copy.items(), key=mitre_sorter)\n    final_format = \"\"\n    for tactics in final_dictionary:\n        if ',' in tactics[0]:\n            tactic_list = tactics[0].split(', ')\n            final_format += \"\\n ## \"\n            for tactic in tactic_list[:-1]:\n                split_tactic = tactic.split('-')\n                for item in split_tactic[:-1]:\n                    final_format += \"{} \".format(item.capitalize())\n                final_format += \"{}, \".format(split_tactic[-1].capitalize())\n            split_tactic = tactic_list[-1].split('-')\n            for item in split_tactic[:-1]:\n                final_format += \"{} \".format(item.capitalize())\n            final_format += \"{}\".format(split_tactic[-1].capitalize())\n        else:\n            tactic_list = tactics[0].split('-')\n            final_format += \"\\n ## \"\n            for tactic in tactic_list[:-1]:\n                final_format += \"{} \".format(tactic.capitalize())\n            final_format += \"{}\".format(tactic_list[-1].capitalize())\n        for k,v in tactics[1].items():\n            final_format += \"\\n - #### {}: {}\".format(k, mitre_dictionary[tactics[0]][k]['id'])\n            for risk_message in v:\n                final_format += \"\\n   - ```{}```\".format(risk_message)\n        final_format += \"\\n\"\n    \n\n    if final_format:\n    \tmitre_format_int_findings__output = final_format\n    else:\n        mitre_format_int_findings__output = \"No Tactics / Techniques available in contributing risk events.\"\n\n\n",
                    "warnings": {},
                    "x": 770,
                    "y": 1272
                },
                "37": {
                    "data": {
                        "action": "add task note",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 5,
                        "functionName": "add_task_note_5",
                        "id": "37",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "content": {
                                "functionId": 5,
                                "parameters": [
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_object_type",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.risk_score",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_min_time",
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.info_max_time",
                                    "mitre_format_int_findings:custom_function:output",
                                    "asset_get_attributes_1:custom_function_result.data.configuration.device"
                                ],
                                "template": "### Splunk Enterprise Security has detected that {0} '**{1}**' generated {2} points of risk.\n\n### Full statistics and timeline on this user's risk behavior can be found [here](https://{6}/app/SplunkEnterpriseSecuritySuite/risk_analysis?earliest={3}&latest={4}&form.risk_object_type_raw={0}&form.risk_object_raw={1}) \n\n\n\n# MITRE ATT&CK\u00ae\nSplunk SOAR has aggregated and aligned the following risk rules to ATT&CK Tactics and Techniques.\n\n{5}"
                            },
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_id": "get_phase_id_1:action_result.data.*.phase_id",
                            "response_plan_id": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.id",
                            "task_id": "get_task_id_1:action_result.data.*.task_id",
                            "title": {
                                "functionId": 5,
                                "parameters": [
                                    "refresh_finding_or_investigation_1:action_result.data.*.data.consolidated_findings.normalized_risk_object"
                                ],
                                "template": "SOAR Analysis for: {0}\n"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "title"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "content"
                            },
                            {
                                "data_type": "string",
                                "field": "task_id"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_id"
                            },
                            {
                                "data_type": "string",
                                "field": "response_plan_id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "37",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 770,
                    "y": 1434
                },
                "38": {
                    "data": {
                        "advanced": {
                            "customName": "",
                            "customNameId": -1,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "is not empty",
                                        "param": "int_findings_threat_objects:custom_function:threat_object"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "threat objects",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "no threat objects",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "decision_5",
                        "id": "38",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "38",
                    "type": "decision",
                    "warnings": {},
                    "x": 860,
                    "y": 1780
                },
                "39": {
                    "data": {
                        "advanced": {
                            "customName": "threat objects note",
                            "customNameId": 1,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "threat_objects_note_1",
                        "id": "39",
                        "parameters": [
                            "int_findings_threat_objects:custom_function:threat_object_type",
                            "int_findings_threat_objects:custom_function:threat_object"
                        ],
                        "template": "Below threat objects have been identified as part of this investigation:\n\n\n| Threat Indicator Type | Indicator Value |\n| --- | --- |\n%%\n| {0} | {1} |\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "39",
                    "type": "format",
                    "warnings": {},
                    "x": 500,
                    "y": 2120
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "run query decision",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "run_query_1:action_result.summary.total_events",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "splunk results exist",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "run_query_decision",
                        "id": "4",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "decision",
                    "warnings": {},
                    "x": 1210,
                    "y": 1092
                },
                "40": {
                    "data": {
                        "action": "add task note",
                        "actionType": "post",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Enterprise Security",
                        "connectorConfigs": [
                            "builtin_mc_connector"
                        ],
                        "connectorId": 191,
                        "connectorVersion": "v1",
                        "functionId": 6,
                        "functionName": "add_task_note_6",
                        "id": "40",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "content": "threat_objects_note_1:formatted_data",
                            "id": "refresh_finding_or_investigation_1:action_result.data.*.data.investigation_id",
                            "phase_id": "get_phase_id_1:action_result.data.*.phase_id",
                            "response_plan_id": "refresh_finding_or_investigation_1:action_result.data.*.data.response_plans.*.id",
                            "task_id": "get_task_id_1:action_result.data.*.task_id",
                            "title": "Threat information:"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "id"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "title"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "content"
                            },
                            {
                                "data_type": "string",
                                "field": "task_id"
                            },
                            {
                                "data_type": "string",
                                "field": "phase_id"
                            },
                            {
                                "data_type": "string",
                                "field": "response_plan_id"
                            }
                        ],
                        "type": "enterpriseSecurity"
                    },
                    "errors": {},
                    "id": "40",
                    "type": "enterpriseSecurity",
                    "warnings": {},
                    "x": 580,
                    "y": 2460
                },
                "42": {
                    "data": {
                        "advanced": {
                            "customName": "int findings threat objects",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 5,
                        "functionName": "int_findings_threat_objects",
                        "id": "42",
                        "inputParameters": [
                            "run_query_2:action_result.data.*.threat_object",
                            "run_query_2:action_result.data.*.threat_object_type"
                        ],
                        "outputVariables": [
                            "threat_object",
                            "threat_object_type"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "42",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    phantom.debug(len(run_query_2_result_item_0))\n    phantom.debug(len(run_query_2_result_item_1))\n    def is_domain_format(value):\n        # Check if it contains '.' but is not in IP address format\n        parts = value.split('.')\n        return len(parts) > 1 and not all(part.isdigit() and 0 <= int(part) <= 255 for part in parts)\n    \n    # Result lists\n    int_findings_threat_objects__threat_object = []\n    int_findings_threat_objects__threat_object_type = []\n\n    # Iterate through both lists and remove None values and duplicates\n    seen = set()\n    for item1, item2 in zip(run_query_2_result_item_0, run_query_2_result_item_1):\n        if item1 is not None and item2 is not None:\n            is_url = item1.startswith(\"http://\") or item1.startswith(\"https://\")\n            is_domain = not is_url and is_domain_format(item1)\n            if item2 == \"other\":\n                if is_url:\n                    item2 = \"url\"\n                elif is_domain:\n                    item2 = \"domain\"\n            pair = (item1, item2)\n            if pair not in seen:\n                int_findings_threat_objects__threat_object.append(item1)\n                int_findings_threat_objects__threat_object_type.append(item2)\n                seen.add(pair)\n    \n    phantom.debug(int_findings_threat_objects__threat_object)\n    phantom.debug(int_findings_threat_objects__threat_object_type)\n",
                    "warnings": {},
                    "x": 780,
                    "y": 1580
                },
                "43": {
                    "data": {
                        "advanced": {
                            "customName": "finding threat objects",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "finding_threat_objects",
                        "id": "43",
                        "inputParameters": [
                            "run_query_1:action_result.data.*.threat_object",
                            "run_query_1:action_result.data.*.threat_object_type"
                        ],
                        "outputVariables": [
                            "threat_object",
                            "threat_object_type"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "43",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    def is_domain_format(value):\n        # Check if it contains '.' but is not in IP address format\n        parts = value.split('.')\n        return len(parts) > 1 and not all(part.isdigit() and 0 <= int(part) <= 255 for part in parts)\n    \n    # Result lists\n    finding_threat_objects__threat_object = []\n    finding_threat_objects__threat_object_type = []\n\n    # Iterate through both lists and remove None values and duplicates\n    seen = set()\n    for item1, item2 in zip(run_query_1_result_item_0, run_query_1_result_item_1):\n        if item1 is not None and item2 is not None:\n            is_url = item1.startswith(\"http://\") or item1.startswith(\"https://\")\n            is_domain = not is_url and is_domain_format(item1)\n            if item2 == \"other\":\n                if is_url:\n                    item2 = \"url\"\n                elif is_domain:\n                    item2 = \"domain\"\n            pair = (item1, item2)\n            if pair not in seen:\n                finding_threat_objects__threat_object.append(item1)\n                finding_threat_objects__threat_object_type.append(item2)\n                seen.add(pair)\n    \n    phantom.debug(finding_threat_objects__threat_object)\n    phantom.debug(finding_threat_objects__threat_object_type)\n\n",
                    "warnings": {},
                    "x": 1140,
                    "y": 1560
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "mitre format findings",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "mitre_format_findings",
                        "id": "5",
                        "inputParameters": [
                            "run_query_1:action_result.data.*.mitre_tactic",
                            "run_query_1:action_result.data.*.mitre_technique",
                            "run_query_1:action_result.data.*.mitre_technique_id",
                            "run_query_1:action_result.data.*.risk_message"
                        ],
                        "outputVariables": [
                            "output"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "code",
                    "userCode": "\n    from collections import OrderedDict \n    from operator import getitem \n    \n    def mitre_sorter(item):\n        tactic_list = [\n            'reconnaissance', 'resource-development', 'initial-access', 'execution', \n            'persistence', 'privilege-escalation', 'defense-evasion', 'credential-access', \n            'discovery', 'lateral-movement', 'collection', 'command-and-control', \n            'exfiltration', 'impact'\n        ]\n        index_map = {v: i for i, v in enumerate(tactic_list)}\n        if ',' in item[0]:\n            first_item = item[0].split(', ')[1]\n            return index_map[first_item]\n        else:\n            return index_map[item[0]]\n\n    \n    def replace_all(text):\n        char_list = ['[', ']', '\"', \"'\"]\n        for char in char_list:\n            text = text.replace(char, '')\n        return text\n\n    mitre_dictionary = {}\n    for mitre_tactic, mitre_technique, mitre_technique_id, risk_message in zip(run_query_1_result_item_0, run_query_1_result_item_1, run_query_1_result_item_2, run_query_1_result_item_3):\n        \n        mitre_tactic = replace_all(json.dumps(mitre_tactic)) if mitre_tactic else None\n        mitre_technique = replace_all(json.dumps(mitre_technique)) if mitre_technique else None\n        mitre_technique_id = replace_all(json.dumps(mitre_technique_id)) if mitre_technique_id else None\n        \n        if mitre_tactic and mitre_tactic not in mitre_dictionary.keys():\n            mitre_dictionary[mitre_tactic] = {mitre_technique: {'id': mitre_technique_id, 'risk_message': [risk_message]}}\n        elif mitre_tactic and mitre_tactic in mitre_dictionary.keys():\n            if mitre_technique and mitre_technique not in mitre_dictionary[mitre_tactic].keys():\n                mitre_dictionary[mitre_tactic][mitre_technique] = {'id': mitre_technique_id, 'risk_message': [risk_message]}\n            elif mitre_technique and mitre_technique in mitre_dictionary[mitre_tactic].keys():\n                if risk_message not in mitre_dictionary[mitre_tactic][mitre_technique]['risk_message']:\n                    mitre_dictionary[mitre_tactic][mitre_technique]['risk_message'].append(risk_message)\n    \n    mitre_copy = mitre_dictionary.copy()\n    for k,v in mitre_copy.items():\n        sorted_techniques = OrderedDict(sorted(v.items(),\n                                               key = lambda x: getitem(x[1], 'id')\n                                              )\n                                       ) \n        for a,b in sorted_techniques.items():\n            sorted_techniques[a] = b['risk_message']\n        mitre_copy[k] = sorted_techniques\n\n    final_dictionary = sorted(mitre_copy.items(), key=mitre_sorter)\n    final_format = \"\"\n    for tactics in final_dictionary:\n        if ',' in tactics[0]:\n            tactic_list = tactics[0].split(', ')\n            final_format += \"\\n ## \"\n            for tactic in tactic_list[:-1]:\n                split_tactic = tactic.split('-')\n                for item in split_tactic[:-1]:\n                    final_format += \"{} \".format(item.capitalize())\n                final_format += \"{}, \".format(split_tactic[-1].capitalize())\n            split_tactic = tactic_list[-1].split('-')\n            for item in split_tactic[:-1]:\n                final_format += \"{} \".format(item.capitalize())\n            final_format += \"{}\".format(split_tactic[-1].capitalize())\n        else:\n            tactic_list = tactics[0].split('-')\n            final_format += \"\\n ## \"\n            for tactic in tactic_list[:-1]:\n                final_format += \"{} \".format(tactic.capitalize())\n            final_format += \"{}\".format(tactic_list[-1].capitalize())\n        for k,v in tactics[1].items():\n            final_format += \"\\n - #### {}: {}\".format(k, mitre_dictionary[tactics[0]][k]['id'])\n            for risk_message in v:\n                final_format += \"\\n   - ```{}```\".format(risk_message)\n        final_format += \"\\n\"\n    \n\n    if final_format:\n    \tmitre_format_findings__output = final_format\n    else:\n        mitre_format_findings__output = \"No Tactics / Techniques available in contributing risk events.\"\n\t\n\n",
                    "warnings": {},
                    "x": 1130,
                    "y": 1278
                }
            },
            "notes": "",
            "origin": {
                "playbook_id": 226,
                "playbook_name": "Risk Notable Enrich",
                "playbook_repo_id": 2,
                "playbook_repo_name": "local"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_trigger": "artifact_created",
        "playbook_type": "es",
        "python_version": "3",
        "schema": "5.0.15",
        "version": "6.3.1.176"
    },
    "create_time": "2024-12-11T05:35:55.221195+00:00",
    "draft_mode": false,
    "labels": [
        "es_soar_integration"
    ],
    "tags": []
}